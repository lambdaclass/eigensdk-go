// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractStakeRegistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IStakeRegistryTypesStakeUpdate is an auto generated low-level Go binding around an user-defined struct.
type IStakeRegistryTypesStakeUpdate struct {
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
	Stake                 *big.Int
}

// IStakeRegistryTypesStrategyParams is an auto generated low-level Go binding around an user-defined struct.
type IStakeRegistryTypesStrategyParams struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ContractStakeRegistryMetaData contains all meta data concerning the ContractStakeRegistry contract.
var ContractStakeRegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_slashingRegistryCoordinator\",\"type\":\"address\",\"internalType\":\"contractISlashingRegistryCoordinator\"},{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"},{\"name\":\"_avsDirectory\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"},{\"name\":\"_allocationManager\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"MAX_WEIGHING_FUNCTION_LENGTH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"WEIGHTING_DIVISOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addStrategies\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"_strategyParams\",\"type\":\"tuple[]\",\"internalType\":\"structIStakeRegistryTypes.StrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allocationManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIAllocationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIAVSDirectory\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperator\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getCurrentStake\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentTotalStake\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLatestStakeUpdate\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIStakeRegistryTypes.StakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeAtBlockNumber\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeAtBlockNumberAndIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeHistory\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIStakeRegistryTypes.StakeUpdate[]\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeHistoryLength\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeUpdateAtIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIStakeRegistryTypes.StakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeUpdateIndexAtBlockNumber\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeAtBlockNumberFromIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeHistoryLength\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeIndicesAtBlockNumber\",\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeUpdateAtIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIStakeRegistryTypes.StakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initializeDelegatedStakeQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"_strategyParams\",\"type\":\"tuple[]\",\"internalType\":\"structIStakeRegistryTypes.StrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initializeSlashableStakeQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"lookAheadPeriod\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"_strategyParams\",\"type\":\"tuple[]\",\"internalType\":\"structIStakeRegistryTypes.StrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isOperatorSetQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"minimumStakeForQuorum\",\"inputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"modifyStrategyParams\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"strategyIndices\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"newMultipliers\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registerOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registryCoordinator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeStrategies\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"indicesToRemove\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinimumStakeForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSlashableStakeLookahead\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"_lookAheadBlocks\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slashableStakeLookAheadPerQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"stakeTypePerQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumIStakeRegistryTypes.StakeType\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategiesPerQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyParams\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyParamsByIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIStakeRegistryTypes.StrategyParams\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyParamsLength\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"updateOperatorStake\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint192\",\"internalType\":\"uint192\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"weightOfOperatorForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"LookAheadPeriodChanged\",\"inputs\":[{\"name\":\"oldLookAheadBlocks\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"},{\"name\":\"newLookAheadBlocks\",\"type\":\"uint32\",\"indexed\":false,\"internalType\":\"uint32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MinimumStakeForQuorumUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorStakeUpdate\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"stake\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QuorumCreated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StakeTypeSet\",\"inputs\":[{\"name\":\"newStakeType\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumIStakeRegistryTypes.StakeType\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyAddedToQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyMultiplierUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyRemovedFromQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"BelowMinimumStakeRequirement\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"EmptyStakeHistory\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InputArrayLengthMismatch\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InputArrayLengthZero\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InputDuplicateStrategy\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InputMultiplierZero\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidBlockNumber\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlySlashingRegistryCoordinator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlySlashingRegistryCoordinatorOwner\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"QuorumAlreadyExists\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"QuorumDoesNotExist\",\"inputs\":[]}]",
	Bin: "0x610100604052348015610010575f5ffd5b50604051613a22380380613a2283398101604081905261002f91610068565b6001600160a01b0393841660e052918316608052821660a0521660c0526100c4565b6001600160a01b0381168114610065575f5ffd5b50565b5f5f5f5f6080858703121561007b575f5ffd5b845161008681610051565b602086015190945061009781610051565b60408601519093506100a881610051565b60608601519092506100b981610051565b939692955090935050565b60805160a05160c05160e0516138de6101445f395f818161042801528181610ece01528181611325015281816113930152818161174001528181611f0601528181611fc20152612ab101525f81816105f301528181610e9f015281816117110152612a7701525f6103e901525f81816106530152611d7701526138de5ff3fe608060405234801561000f575f5ffd5b5060043610610229575f3560e01c80639f3ccf651161012a578063c8294c56116100b4578063df5cf72311610079578063df5cf7231461064e578063e086adb314610675578063f2be94ae14610688578063f851e1981461069b578063fa28c627146106ae575f5ffd5b8063c8294c56146105db578063ca8aa7c7146105ee578063cc5a7c2014610615578063d5eccc0514610628578063dd9846b91461063b575f5ffd5b8063b6904b78116100fa578063b6904b7814610567578063bc9a40c31461057a578063bd29b8cd1461058d578063c46778a5146105a0578063c601527d146105c8575f5ffd5b80639f3ccf65146104d15780639f8aff26146104e4578063ac6bfb0314610507578063adc804da14610527575f5ffd5b80635e5a6775116101b65780636d14a9871161017b5780636d14a9871461042357806375d4173a1461044a5780637c1723471461045d57806381c07502146104775780639ab4d6ff14610497575f5ffd5b80635e5a6775146103685780635f1f2d771461037757806366acfefe1461038a578063697fbd93146103b55780636b3aa72e146103e4575f5ffd5b806325504777116101fc57806325504777146102c35780632cd95940146102e45780633ca5a5f5146103045780634bd26e09146103265780635401ed2714610355575f5ffd5b80630491b41c1461022d57806308732461146102625780631f9b74e01461028357806320b66298146102ae575b5f5ffd5b61024f61023b366004612c3a565b60ff165f9081526001602052604090205490565b6040519081526020015b60405180910390f35b610275610270366004612c53565b6106c1565b604051610259929190612c7b565b610296610291366004612cb1565b610706565b6040516001600160601b039091168152602001610259565b6102c16102bc366004612d26565b610728565b005b6102d66102d1366004612de1565b6108c6565b604051610259929190612e7b565b6102f76102f2366004612e9f565b610a4e565b6040516102599190612ec9565b61024f610312366004612c3a565b60ff165f9081526003602052604090205490565b61024f610334366004612e9f565b5f91825260026020908152604080842060ff93909316845291905290205490565b610296610363366004612e9f565b610aeb565b61024f670de0b6b3a764000081565b6102c1610385366004612fd0565b610b03565b61039d610398366004612de1565b610fa3565b6040516001600160c01b039091168152602001610259565b6103d76103c3366004612c3a565b60056020525f908152604090205460ff1681565b604051610259919061308c565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610259565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6102c161045836600461315d565b61103f565b610465602081565b60405160ff9091168152602001610259565b61048a6104853660046131c9565b611125565b6040516102599190613217565b6104bc6104a5366004612c3a565b60066020525f908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610259565b61040b6104df366004612c53565b6112cd565b6104f76104f2366004612c3a565b611301565b6040519015158152602001610259565b61051a610515366004613254565b611426565b6040516102599190613284565b61053a610535366004612c53565b6114bc565b6040805182516001600160a01b031681526020928301516001600160601b03169281019290925201610259565b61051a610575366004612c53565b611533565b6102c16105883660046132be565b6115c0565b6102c161059b3660046132e6565b6115e1565b6102966105ae366004612c3a565b5f602081905290815260409020546001600160601b031681565b6102c16105d6366004613314565b611644565b6102966105e936600461335e565b611807565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6102c1610623366004613398565b611883565b610296610636366004612c3a565b611975565b6104bc610649366004613402565b6119c6565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6102c161068336600461343b565b6119d2565b610296610696366004613463565b6119ee565b61051a6106a9366004612e9f565b611a81565b6102966106bc366004613402565b611b67565b6003602052815f5260405f2081815481106106da575f80fd5b5f918252602090912001546001600160a01b0381169250600160a01b90046001600160601b0316905082565b5f8261071181611bc6565b5f61071c8585611bf8565b509250505b5092915050565b610730611f04565b8461073a81611bc6565b83806107595760405163796cc52560e01b815260040160405180910390fd5b828114610779576040516343714afd60e01b815260040160405180910390fd5b60ff87165f908152600360205260408120905b828110156108bb578585828181106107a6576107a66134a2565b90506020020160208101906107bb91906134b6565b828989848181106107ce576107ce6134a2565b90506020020135815481106107e5576107e56134a2565b905f5260205f20015f0160146101000a8154816001600160601b0302191690836001600160601b031602179055508860ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75838a8a8581811061084b5761084b6134a2565b9050602002013581548110610862576108626134a2565b5f918252602090912001546001600160a01b0316888885818110610888576108886134a2565b905060200201602081019061089d91906134b6565b6040516108ab929190612c7b565b60405180910390a260010161078c565b505050505050505050565b6060806108d1611fb7565b5f836001600160401b038111156108ea576108ea612f42565b604051908082528060200260200182016040528015610913578160200160208202803683370190505b5090505f846001600160401b0381111561092f5761092f612f42565b604051908082528060200260200182016040528015610958578160200160208202803683370190505b5090505f5b85811015610a40575f878783818110610978576109786134a2565b919091013560f81c915061098d905081611bc6565b5f5f610999838d611bf8565b91509150806109bb5760405163207f13e360e11b815260040160405180910390fd5b5f6109c78c8585612000565b9050828786815181106109dc576109dc6134a2565b60200260200101906001600160601b031690816001600160601b031681525050610a068482612279565b868681518110610a1857610a186134a2565b6001600160601b039092166020928302919091019091015250506001909201915061095d9050565b509097909650945050505050565b5f82815260026020908152604080832060ff851684528252808320805482518185028101850190935280835260609492939192909184015b82821015610ade575f848152602090819020604080516060810182529185015463ffffffff8082168452600160201b82041683850152600160401b90046001600160601b031690820152825260019092019101610a86565b5050505090505b92915050565b5f5f610af78484611a81565b60400151949350505050565b610b0b611f04565b81610b1581611bc6565b815180610b355760405163796cc52560e01b815260040160405180910390fd5b60ff84165f908152600360209081526040808320600490925282209091836001600160401b03811115610b6a57610b6a612f42565b604051908082528060200260200182016040528015610b93578160200160208202803683370190505b5090505f5b84811015610e8e5783878281518110610bb357610bb36134a2565b602002602001015181548110610bcb57610bcb6134a2565b5f9182526020909120015482516001600160a01b0390911690839083908110610bf657610bf66134a2565b60200260200101906001600160a01b031690816001600160a01b0316815250508760ff167f31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f785898481518110610c4e57610c4e6134a2565b602002602001015181548110610c6657610c666134a2565b5f91825260209182902001546040516001600160a01b0390911681520160405180910390a28760ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a7585898481518110610cc357610cc36134a2565b602002602001015181548110610cdb57610cdb6134a2565b5f91825260208083209190910154604080516001600160a01b039092168252918101929092520160405180910390a283548490610d1a906001906134e3565b81548110610d2a57610d2a6134a2565b905f5260205f200184888381518110610d4557610d456134a2565b602002602001015181548110610d5d57610d5d6134a2565b5f91825260209091208254910180546001600160a01b0319166001600160a01b03909216918217815591546001600160601b03600160a01b9182900416021790558354849080610daf57610daf6134f6565b5f8281526020812082015f199081019190915501905582548390610dd5906001906134e3565b81548110610de557610de56134a2565b905f5260205f20015f9054906101000a90046001600160a01b031683888381518110610e1357610e136134a2565b602002602001015181548110610e2b57610e2b6134a2565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555082805480610e6657610e666134f6565b5f8281526020902081015f1990810180546001600160a01b0319169055019055600101610b98565b50610e9887611301565b15610f9a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b66bd9897f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630764cb936040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f28573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f4c919061350a565b89846040518463ffffffff1660e01b8152600401610f6c93929190613525565b5f604051808303815f87803b158015610f83575f5ffd5b505af1158015610f95573d5f5f3e3d5ffd5b505050505b50505050505050565b5f610fac611fb7565b5f805b83811015611035575f858583818110610fca57610fca6134a2565b919091013560f81c9150610fdf905081611bc6565b5f5f610feb838b611bf8565b915091508061100c575f9150600160ff84161b6001600160c01b0386161794505b5f6110188a8585612000565b90506110248482612279565b505060019093019250610faf915050565b5095945050505050565b611047611fb7565b60ff83165f9081526001602052604090205415611077576040516310cda51760e21b815260040160405180910390fd5b61108183826123ea565b61108b83836126e2565b611095835f61274a565b505060ff165f908152600160208181526040808420815160608101835263ffffffff438116825281850187815293820187815283549687018455928752939095209451949093018054915193516001600160601b0316600160401b02600160401b600160a01b0319948416600160201b0267ffffffffffffffff1990931695909316949094171791909116179055565b60605f826001600160401b0381111561114057611140612f42565b604051908082528060200260200182016040528015611169578160200160208202803683370190505b5090505f5b838110156112c2575f858583818110611189576111896134a2565b919091013560f81c915061119e905081611bc6565b60ff81165f908152600160205260408120805463ffffffff8a1692906111c6576111c66134a2565b5f9182526020909120015463ffffffff1611156111f65760405163cc64657360e01b815260040160405180910390fd5b60ff81165f90815260016020526040812054905b818110156112b75760ff83165f90815260016020819052604090912063ffffffff8b169161123884866134e3565b61124291906134e3565b81548110611252576112526134a2565b5f9182526020909120015463ffffffff16116112af57600161127482846134e3565b61127e91906134e3565b858581518110611290576112906134a2565b602002602001019063ffffffff16908163ffffffff16815250506112b7565b60010161120a565b50505060010161116e565b5090505b9392505050565b6004602052815f5260405f2081815481106112e6575f80fd5b5f918252602090912001546001600160a01b03169150829050565b60405163a4d7871f60e01b815260ff821660048201525f9081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a4d7871f90602401602060405180830381865afa15801561136a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061138e919061358f565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166381f936d26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ed573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611411919061358f565b905080801561141e575081155b949350505050565b604080516060810182525f80825260208083018290528284018290528582526002815283822060ff8816835290529190912080548390811061146a5761146a6134a2565b5f91825260209182902060408051606081018252929091015463ffffffff8082168452600160201b82041693830193909352600160401b9092046001600160601b031691810191909152949350505050565b604080518082019091525f808252602082015260ff83165f9081526003602052604090208054839081106114f2576114f26134a2565b5f918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b90046001600160601b0316918101919091529392505050565b604080516060810182525f808252602080830182905282840182905260ff86168252600190529190912080548390811061156f5761156f6134a2565b5f91825260209182902060408051606081018252929091015463ffffffff8082168452600160201b82041693830193909352600160401b9092046001600160601b0316918101919091529392505050565b6115c8611f04565b816115d281611bc6565b6115dc83836126e2565b505050565b6115e9611fb7565b5f5b8181101561163e575f838383818110611606576116066134a2565b919091013560f81c915061161b905081611bc6565b5f61162786835f612000565b90506116338282612279565b5050506001016115eb565b50505050565b61164c611f04565b8161165681611bc6565b61166083836123ea565b815161166b84611301565b1561163e575f816001600160401b0381111561168957611689612f42565b6040519080825280602002602001820160405280156116b2578160200160208202803683370190505b5090505f5b8281101561170e578481815181106116d1576116d16134a2565b60200260200101515f01518282815181106116ee576116ee6134a2565b6001600160a01b03909216602092830291909101909101526001016116b7565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350feea207f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630764cb936040518163ffffffff1660e01b8152600401602060405180830381865afa15801561179a573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117be919061350a565b87846040518463ffffffff1660e01b81526004016117de93929190613525565b5f604051808303815f87803b1580156117f5575f5ffd5b505af11580156108bb573d5f5f3e3d5ffd5b60ff83165f90815260016020526040812080548291908490811061182d5761182d6134a2565b5f91825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b90930492909216908201529050610af781856127b7565b61188b611fb7565b60ff84165f90815260016020526040902054156118bb576040516310cda51760e21b815260040160405180910390fd5b6118c584826123ea565b6118cf84846126e2565b6118da84600161274a565b6118e4848361282e565b50505060ff165f908152600160208181526040808420815160608101835263ffffffff438116825281850187815293820187815283549687018455928752939095209451949093018054915193516001600160601b0316600160401b02600160401b600160a01b0319948416600160201b0267ffffffffffffffff1990931695909316949094171791909116179055565b60ff81165f908152600160208190526040822080549091611995916134e3565b815481106119a5576119a56134a2565b5f91825260209091200154600160401b90046001600160601b031692915050565b5f61141e84848461289a565b6119da611f04565b816119e481611bc6565b6115dc838361282e565b5f82815260026020908152604080832060ff881684529091528120805482919084908110611a1e57611a1e6134a2565b5f91825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b90930492909216908201529050611a7481866127b7565b6040015195945050505050565b60408051606080820183525f80835260208084018290528385018290528682526002815284822060ff8716835281528482205485519384018652828452908301829052938201819052919291829003611add579150610ae59050565b5f85815260026020908152604080832060ff881684529091529020611b036001846134e3565b81548110611b1357611b136134a2565b5f91825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b90930492909216908201529250610ae5915050565b5f83815260026020908152604080832060ff861684529091528120611b8d85858561289a565b63ffffffff1681548110611ba357611ba36134a2565b5f91825260209091200154600160401b90046001600160601b0316949350505050565b60ff81165f90815260016020526040902054611bf557604051637310cff560e11b815260040160405180910390fd5b50565b5f5f5f5f611c148660ff165f9081526003602052604090205490565b604080518082019091525f80825260208201529091506060600160ff808a165f90815260056020526040902054166001811115611c5357611c53613078565b03611d4c57611c628888612a01565b90505f5b83811015611d465760ff89165f908152600360205260409020805482908110611c9157611c916134a2565b5f9182526020808320604080518082019091529201546001600160a01b0381168352600160a01b90046001600160601b0316908201528351909450839083908110611cde57611cde6134a2565b60200260200101511115611d3e57670de0b6b3a764000083602001516001600160601b0316838381518110611d1557611d156134a2565b6020026020010151611d2791906135ae565b611d3191906135c5565b611d3b90866135e4565b94505b600101611c66565b50611ed2565b60ff88165f908152600460208190526040918290209151639004134760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639004134792611dab928c92910161363f565b5f60405180830381865afa158015611dc5573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611dec91908101906136bd565b90505f5b83811015611ed05760ff89165f908152600360205260409020805482908110611e1b57611e1b6134a2565b5f9182526020808320604080518082019091529201546001600160a01b0381168352600160a01b90046001600160601b0316908201528351909450839083908110611e6857611e686134a2565b60200260200101511115611ec857670de0b6b3a764000083602001516001600160601b0316838381518110611e9f57611e9f6134a2565b6020026020010151611eb191906135ae565b611ebb91906135c5565b611ec590866135e4565b94505b600101611df0565b505b50505060ff85165f908152602081905260409020549092506001600160601b03908116908316101590505b9250929050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f60573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f84919061350a565b6001600160a01b0316336001600160a01b031614611fb55760405163ce98c24b60e01b815260040160405180910390fd5b565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611fb557604051632c01b20560e21b815260040160405180910390fd5b5f83815260026020908152604080832060ff8616845290915281205481908082036120c4575f86815260026020908152604080832060ff891684528252808320815160608101835263ffffffff43811682528185018681526001600160601b03808c16958401958652845460018101865594885295909620915191909201805495519351909416600160401b02600160401b600160a01b0319938316600160201b0267ffffffffffffffff199096169190921617939093171691909117905561221f565b5f86815260026020908152604080832060ff8916845290915281206120ea6001846134e3565b815481106120fa576120fa6134a2565b5f91825260209091200180546001600160601b03600160401b9091048116945090915085168303612130575f93505050506112c6565b805463ffffffff438116911603612168578054600160401b600160a01b031916600160401b6001600160601b0387160217815561221d565b805467ffffffff000000001916600160201b4363ffffffff9081168281029390931784555f8a815260026020908152604080832060ff8d168452825280832081516060810183529687528683018481526001600160601b038d81169389019384528254600181018455928652939094209651960180549351915196851667ffffffffffffffff1990941693909317931690930291909117600160401b600160a01b031916600160401b93909216929092021790555b505b6040805160ff871681526001600160601b038616602082015287917f2f527d527e95d8fe40aec55377743bb779087da3f6d0d08f12e36444da62327d910160405180910390a261226f8285612be1565b9695505050505050565b60ff82165f908152600160208190526040822080549183919061229c90846134e3565b815481106122ac576122ac6134a2565b905f5260205f20019050835f036122d75754600160401b90046001600160601b03169150610ae59050565b80545f906122f590600160401b90046001600160601b031686612bf8565b825490915063ffffffff438116911603612330578154600160401b600160a01b031916600160401b6001600160601b038316021782556123e1565b815463ffffffff438116600160201b81810267ffffffff000000001990941693909317855560ff89165f90815260016020818152604080842081516060810183529586528583018581526001600160601b03808b169388019384528254958601835591865292909420945194909201805491519251909316600160401b02600160401b600160a01b031992861690960267ffffffffffffffff19909116939094169290921792909217169190911790555b95945050505050565b5f81511161240b5760405163796cc52560e01b815260040160405180910390fd5b805160ff83165f908152600360209081526040909120549061242d83836136ee565b111561244c576040516343714afd60e01b815260040160405180910390fd5b5f5b828110156126db575f5b61246282846136ee565b8110156124f15784828151811061247b5761247b6134a2565b60200260200101515f01516001600160a01b031660035f8860ff1660ff1681526020019081526020015f2082815481106124b7576124b76134a2565b5f918252602090912001546001600160a01b0316036124e957604051637b74340b60e01b815260040160405180910390fd5b600101612458565b505f848281518110612505576125056134a2565b6020026020010151602001516001600160601b03161161253857604051637257125160e01b815260040160405180910390fd5b60ff85165f908152600360205260409020845185908390811061255d5761255d6134a2565b60209081029190910181015182546001810184555f9384528284208251928401516001600160601b0316600160a01b026001600160a01b039093169290921791015560ff87168252600490526040902084518590839081106125c1576125c16134a2565b6020908102919091018101515182546001810184555f938452919092200180546001600160a01b0319166001600160a01b03909216919091179055835160ff8616907f10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f540490869084908110612637576126376134a2565b602090810291909101810151516040516001600160a01b0390911681520160405180910390a28460ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75858381518110612694576126946134a2565b60200260200101515f01518684815181106126b1576126b16134a2565b6020026020010151602001516040516126cb929190612c7b565b60405180910390a260010161244e565b5050505050565b60ff82165f818152602081815260409182902080546bffffffffffffffffffffffff19166001600160601b03861690811790915591519182527f26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf910160405180910390a25050565b60ff82165f908152600560205260409020805482919060ff19166001838181111561277757612777613078565b02179055507f7c112e863ccf007862e2c9e25819c933fedbc9350a6443423b4a8599c2e8a52d816040516127ab919061308c565b60405180910390a15050565b815f015163ffffffff168163ffffffff1610156127e757604051631391e11b60e21b815260040160405180910390fd5b602082015163ffffffff16158061280d5750816020015163ffffffff168163ffffffff16105b61282a57604051631391e11b60e21b815260040160405180910390fd5b5050565b60ff82165f90815260066020908152604091829020805463ffffffff19811663ffffffff8681169182179093558451929091168083529282015290917f28d7358b79f02d21b8b7e17aefc4185a64308aa37406fa5befc05b91932c39c7910160405180910390a1505050565b5f83815260026020908152604080832060ff86168452909152812054805b8015612938575f86815260026020908152604080832060ff89168452909152902063ffffffff8516906128ec6001846134e3565b815481106128fc576128fc6134a2565b5f9182526020909120015463ffffffff16116129265761291d6001826134e3565b925050506112c6565b8061293081613701565b9150506128b8565b5060405162461bcd60e51b815260206004820152608160248201527f5374616b6552656769737472792e5f6765745374616b65557064617465496e6460448201527f6578466f724f70657261746f724174426c6f636b4e756d6265723a206e6f207360648201527f74616b652075706461746520666f756e6420666f72206f70657261746f72496460848201527f20616e642071756f72756d4e756d62657220617420626c6f636b206e756d626560a4820152603960f91b60c482015260e40160405180910390fd5b6040805160018082528183019092526060915f91906020808301908036833701905050905082815f81518110612a3957612a396134a2565b6001600160a01b0390921660209283029190910182015260ff85165f90815260069091526040812054612a729063ffffffff16436136ee565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632bab2c4a60405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630764cb936040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b0b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b2f919061350a565b6001600160a01b0316815260ff8a1660209182018190525f90815260049182905260409081902090516001600160e01b031960e086901b168152612b799392899291899101613716565b5f60405180830381865afa158015612b93573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612bba91908101906137a1565b9050805f81518110612bce57612bce6134a2565b6020026020010151935050505092915050565b5f6112c66001600160601b03808516908416613850565b5f5f821215612c1b57612c0a8261386f565b612c149084613889565b9050610ae5565b612c1482846135e4565b803560ff81168114612c35575f5ffd5b919050565b5f60208284031215612c4a575f5ffd5b6112c682612c25565b5f5f60408385031215612c64575f5ffd5b612c6d83612c25565b946020939093013593505050565b6001600160a01b039290921682526001600160601b0316602082015260400190565b6001600160a01b0381168114611bf5575f5ffd5b5f5f60408385031215612cc2575f5ffd5b612ccb83612c25565b91506020830135612cdb81612c9d565b809150509250929050565b5f5f83601f840112612cf6575f5ffd5b5081356001600160401b03811115612d0c575f5ffd5b6020830191508360208260051b8501011115611efd575f5ffd5b5f5f5f5f5f60608688031215612d3a575f5ffd5b612d4386612c25565b945060208601356001600160401b03811115612d5d575f5ffd5b612d6988828901612ce6565b90955093505060408601356001600160401b03811115612d87575f5ffd5b612d9388828901612ce6565b969995985093965092949392505050565b5f5f83601f840112612db4575f5ffd5b5081356001600160401b03811115612dca575f5ffd5b602083019150836020828501011115611efd575f5ffd5b5f5f5f5f60608587031215612df4575f5ffd5b8435612dff81612c9d565b93506020850135925060408501356001600160401b03811115612e20575f5ffd5b612e2c87828801612da4565b95989497509550505050565b5f8151808452602084019350602083015f5b82811015612e715781516001600160601b0316865260209586019590910190600101612e4a565b5093949350505050565b604081525f612e8d6040830185612e38565b82810360208401526123e18185612e38565b5f5f60408385031215612eb0575f5ffd5b82359150612ec060208401612c25565b90509250929050565b602080825282518282018190525f918401906040840190835b81811015612f3757612f2183855163ffffffff815116825263ffffffff60208201511660208301526001600160601b0360408201511660408301525050565b6020939093019260609290920191600101612ee2565b509095945050505050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b0381118282101715612f7857612f78612f42565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612fa657612fa6612f42565b604052919050565b5f6001600160401b03821115612fc657612fc6612f42565b5060051b60200190565b5f5f60408385031215612fe1575f5ffd5b612fea83612c25565b915060208301356001600160401b03811115613004575f5ffd5b8301601f81018513613014575f5ffd5b803561302761302282612fae565b612f7e565b8082825260208201915060208360051b850101925087831115613048575f5ffd5b6020840193505b8284101561306a57833582526020938401939091019061304f565b809450505050509250929050565b634e487b7160e01b5f52602160045260245ffd5b60208101600283106130ac57634e487b7160e01b5f52602160045260245ffd5b91905290565b80356001600160601b0381168114612c35575f5ffd5b5f82601f8301126130d7575f5ffd5b81356130e561302282612fae565b8082825260208201915060208360061b860101925085831115613106575f5ffd5b602085015b838110156110355760408188031215613122575f5ffd5b61312a612f56565b813561313581612c9d565b8152613143602083016130b2565b60208201528084525060208301925060408101905061310b565b5f5f5f6060848603121561316f575f5ffd5b61317884612c25565b9250613186602085016130b2565b915060408401356001600160401b038111156131a0575f5ffd5b6131ac868287016130c8565b9150509250925092565b803563ffffffff81168114612c35575f5ffd5b5f5f5f604084860312156131db575f5ffd5b6131e4846131b6565b925060208401356001600160401b038111156131fe575f5ffd5b61320a86828701612da4565b9497909650939450505050565b602080825282518282018190525f918401906040840190835b81811015612f3757835163ffffffff16835260209384019390920191600101613230565b5f5f5f60608486031215613266575f5ffd5b61326f84612c25565b95602085013595506040909401359392505050565b60608101610ae5828463ffffffff815116825263ffffffff60208201511660208301526001600160601b0360408201511660408301525050565b5f5f604083850312156132cf575f5ffd5b6132d883612c25565b9150612ec0602084016130b2565b5f5f5f604084860312156132f8575f5ffd5b8335925060208401356001600160401b038111156131fe575f5ffd5b5f5f60408385031215613325575f5ffd5b61332e83612c25565b915060208301356001600160401b03811115613348575f5ffd5b613354858286016130c8565b9150509250929050565b5f5f5f60608486031215613370575f5ffd5b61337984612c25565b9250613387602085016131b6565b929592945050506040919091013590565b5f5f5f5f608085870312156133ab575f5ffd5b6133b485612c25565b93506133c2602086016130b2565b92506133d0604086016131b6565b915060608501356001600160401b038111156133ea575f5ffd5b6133f6878288016130c8565b91505092959194509250565b5f5f5f60608486031215613414575f5ffd5b8335925061342460208501612c25565b9150613432604085016131b6565b90509250925092565b5f5f6040838503121561344c575f5ffd5b61345583612c25565b9150612ec0602084016131b6565b5f5f5f5f60808587031215613476575f5ffd5b61347f85612c25565b935061348d602086016131b6565b93969395505050506040820135916060013590565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156134c6575f5ffd5b6112c6826130b2565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610ae557610ae56134cf565b634e487b7160e01b5f52603160045260245ffd5b5f6020828403121561351a575f5ffd5b81516112c681612c9d565b6001600160a01b038416815260ff831660208083019190915260606040830181905283519083018190525f918401906080840190835b818110156135825783516001600160a01b031683526020938401939092019160010161355b565b5090979650505050505050565b5f6020828403121561359f575f5ffd5b815180151581146112c6575f5ffd5b8082028115828204841417610ae557610ae56134cf565b5f826135df57634e487b7160e01b5f52601260045260245ffd5b500490565b6001600160601b038181168382160190811115610ae557610ae56134cf565b5f8154808452602084019350825f5260205f205f5b82811015612e715781546001600160a01b0316865260209095019460019182019101613618565b6001600160a01b03831681526040602082018190525f9061141e90830184613603565b5f82601f830112613671575f5ffd5b815161367f61302282612fae565b8082825260208201915060208360051b8601019250858311156136a0575f5ffd5b602085015b838110156110355780518352602092830192016136a5565b5f602082840312156136cd575f5ffd5b81516001600160401b038111156136e2575f5ffd5b61141e84828501613662565b80820180821115610ae557610ae56134cf565b5f8161370f5761370f6134cf565b505f190190565b84516001600160a01b0316815260208086015163ffffffff168183015260a06040830181905285519083018190525f9186019060c0840190835b818110156137775783516001600160a01b0316835260209384019390920191600101613750565b5050838103606085015261378b8187613603565b925050506123e1608083018463ffffffff169052565b5f602082840312156137b1575f5ffd5b81516001600160401b038111156137c6575f5ffd5b8201601f810184136137d6575f5ffd5b80516137e461302282612fae565b8082825260208201915060208360051b850101925086831115613805575f5ffd5b602084015b838110156138455780516001600160401b03811115613827575f5ffd5b61383689602083890101613662565b8452506020928301920161380a565b509695505050505050565b8181035f831280158383131683831282161715610721576107216134cf565b5f600160ff1b8201613883576138836134cf565b505f0390565b6001600160601b038281168282160390811115610ae557610ae56134cf56fea2646970667358221220c2c11ea3fbabf1ea5764f279bec484b353a24b049000160105e414393a50f62264736f6c634300081b0033",
}

// ContractStakeRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractStakeRegistryMetaData.ABI instead.
var ContractStakeRegistryABI = ContractStakeRegistryMetaData.ABI

// ContractStakeRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractStakeRegistryMetaData.Bin instead.
var ContractStakeRegistryBin = ContractStakeRegistryMetaData.Bin

// DeployContractStakeRegistry deploys a new Ethereum contract, binding an instance of ContractStakeRegistry to it.
func DeployContractStakeRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, _slashingRegistryCoordinator common.Address, _delegationManager common.Address, _avsDirectory common.Address, _allocationManager common.Address) (common.Address, *types.Transaction, *ContractStakeRegistry, error) {
	parsed, err := ContractStakeRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractStakeRegistryBin), backend, _slashingRegistryCoordinator, _delegationManager, _avsDirectory, _allocationManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractStakeRegistry{ContractStakeRegistryCaller: ContractStakeRegistryCaller{contract: contract}, ContractStakeRegistryTransactor: ContractStakeRegistryTransactor{contract: contract}, ContractStakeRegistryFilterer: ContractStakeRegistryFilterer{contract: contract}}, nil
}

// ContractStakeRegistryMethods is an auto generated interface around an Ethereum contract.
type ContractStakeRegistryMethods interface {
	ContractStakeRegistryCalls
	ContractStakeRegistryTransacts
	ContractStakeRegistryFilters
}

// ContractStakeRegistryCalls is an auto generated interface that defines the call methods available for an Ethereum contract.
type ContractStakeRegistryCalls interface {
	MAXWEIGHINGFUNCTIONLENGTH(opts *bind.CallOpts) (uint8, error)

	WEIGHTINGDIVISOR(opts *bind.CallOpts) (*big.Int, error)

	AllocationManager(opts *bind.CallOpts) (common.Address, error)

	AvsDirectory(opts *bind.CallOpts) (common.Address, error)

	Delegation(opts *bind.CallOpts) (common.Address, error)

	GetCurrentStake(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error)

	GetCurrentTotalStake(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error)

	GetLatestStakeUpdate(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (IStakeRegistryTypesStakeUpdate, error)

	GetStakeAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error)

	GetStakeAtBlockNumberAndIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error)

	GetStakeHistory(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) ([]IStakeRegistryTypesStakeUpdate, error)

	GetStakeHistoryLength(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error)

	GetStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, operatorId [32]byte, index *big.Int) (IStakeRegistryTypesStakeUpdate, error)

	GetStakeUpdateIndexAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error)

	GetTotalStakeAtBlockNumberFromIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error)

	GetTotalStakeHistoryLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error)

	GetTotalStakeIndicesAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, quorumNumbers []byte) ([]uint32, error)

	GetTotalStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IStakeRegistryTypesStakeUpdate, error)

	IsOperatorSetQuorum(opts *bind.CallOpts, quorumNumber uint8) (bool, error)

	MinimumStakeForQuorum(opts *bind.CallOpts, arg0 uint8) (*big.Int, error)

	RegistryCoordinator(opts *bind.CallOpts) (common.Address, error)

	SlashableStakeLookAheadPerQuorum(opts *bind.CallOpts, quorumNumber uint8) (uint32, error)

	StakeTypePerQuorum(opts *bind.CallOpts, quorumNumber uint8) (uint8, error)

	StrategiesPerQuorum(opts *bind.CallOpts, quorumNumber uint8, arg1 *big.Int) (common.Address, error)

	StrategyParams(opts *bind.CallOpts, quorumNumber uint8, arg1 *big.Int) (struct {
		Strategy   common.Address
		Multiplier *big.Int
	}, error)

	StrategyParamsByIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IStakeRegistryTypesStrategyParams, error)

	StrategyParamsLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error)

	WeightOfOperatorForQuorum(opts *bind.CallOpts, quorumNumber uint8, operator common.Address) (*big.Int, error)
}

// ContractStakeRegistryTransacts is an auto generated interface that defines the transact methods available for an Ethereum contract.
type ContractStakeRegistryTransacts interface {
	AddStrategies(opts *bind.TransactOpts, quorumNumber uint8, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error)

	DeregisterOperator(opts *bind.TransactOpts, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error)

	InitializeDelegatedStakeQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error)

	InitializeSlashableStakeQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int, lookAheadPeriod uint32, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error)

	ModifyStrategyParams(opts *bind.TransactOpts, quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error)

	RegisterOperator(opts *bind.TransactOpts, operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error)

	RemoveStrategies(opts *bind.TransactOpts, quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error)

	SetMinimumStakeForQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error)

	SetSlashableStakeLookahead(opts *bind.TransactOpts, quorumNumber uint8, _lookAheadBlocks uint32) (*types.Transaction, error)

	UpdateOperatorStake(opts *bind.TransactOpts, operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error)
}

// ContractStakeRegistryFilterer is an auto generated interface that defines the log filtering methods available for an Ethereum contract.
type ContractStakeRegistryFilters interface {
	FilterLookAheadPeriodChanged(opts *bind.FilterOpts) (*ContractStakeRegistryLookAheadPeriodChangedIterator, error)
	WatchLookAheadPeriodChanged(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryLookAheadPeriodChanged) (event.Subscription, error)
	ParseLookAheadPeriodChanged(log types.Log) (*ContractStakeRegistryLookAheadPeriodChanged, error)

	FilterMinimumStakeForQuorumUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator, error)
	WatchMinimumStakeForQuorumUpdated(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryMinimumStakeForQuorumUpdated, quorumNumber []uint8) (event.Subscription, error)
	ParseMinimumStakeForQuorumUpdated(log types.Log) (*ContractStakeRegistryMinimumStakeForQuorumUpdated, error)

	FilterOperatorStakeUpdate(opts *bind.FilterOpts, operatorId [][32]byte) (*ContractStakeRegistryOperatorStakeUpdateIterator, error)
	WatchOperatorStakeUpdate(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryOperatorStakeUpdate, operatorId [][32]byte) (event.Subscription, error)
	ParseOperatorStakeUpdate(log types.Log) (*ContractStakeRegistryOperatorStakeUpdate, error)

	FilterQuorumCreated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryQuorumCreatedIterator, error)
	WatchQuorumCreated(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryQuorumCreated, quorumNumber []uint8) (event.Subscription, error)
	ParseQuorumCreated(log types.Log) (*ContractStakeRegistryQuorumCreated, error)

	FilterStakeTypeSet(opts *bind.FilterOpts) (*ContractStakeRegistryStakeTypeSetIterator, error)
	WatchStakeTypeSet(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStakeTypeSet) (event.Subscription, error)
	ParseStakeTypeSet(log types.Log) (*ContractStakeRegistryStakeTypeSet, error)

	FilterStrategyAddedToQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryStrategyAddedToQuorumIterator, error)
	WatchStrategyAddedToQuorum(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStrategyAddedToQuorum, quorumNumber []uint8) (event.Subscription, error)
	ParseStrategyAddedToQuorum(log types.Log) (*ContractStakeRegistryStrategyAddedToQuorum, error)

	FilterStrategyMultiplierUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryStrategyMultiplierUpdatedIterator, error)
	WatchStrategyMultiplierUpdated(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStrategyMultiplierUpdated, quorumNumber []uint8) (event.Subscription, error)
	ParseStrategyMultiplierUpdated(log types.Log) (*ContractStakeRegistryStrategyMultiplierUpdated, error)

	FilterStrategyRemovedFromQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryStrategyRemovedFromQuorumIterator, error)
	WatchStrategyRemovedFromQuorum(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStrategyRemovedFromQuorum, quorumNumber []uint8) (event.Subscription, error)
	ParseStrategyRemovedFromQuorum(log types.Log) (*ContractStakeRegistryStrategyRemovedFromQuorum, error)
}

// ContractStakeRegistry is an auto generated Go binding around an Ethereum contract.
type ContractStakeRegistry struct {
	ContractStakeRegistryCaller     // Read-only binding to the contract
	ContractStakeRegistryTransactor // Write-only binding to the contract
	ContractStakeRegistryFilterer   // Log filterer for contract events
}

// ContractStakeRegistry implements the ContractStakeRegistryMethods interface.
var _ ContractStakeRegistryMethods = (*ContractStakeRegistry)(nil)

// ContractStakeRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractStakeRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractStakeRegistryCaller implements the ContractStakeRegistryCalls interface.
var _ ContractStakeRegistryCalls = (*ContractStakeRegistryCaller)(nil)

// ContractStakeRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractStakeRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractStakeRegistryTransactor implements the ContractStakeRegistryTransacts interface.
var _ ContractStakeRegistryTransacts = (*ContractStakeRegistryTransactor)(nil)

// ContractStakeRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractStakeRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractStakeRegistryFilterer implements the ContractStakeRegistryFilters interface.
var _ ContractStakeRegistryFilters = (*ContractStakeRegistryFilterer)(nil)

// ContractStakeRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractStakeRegistrySession struct {
	Contract     *ContractStakeRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ContractStakeRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractStakeRegistryCallerSession struct {
	Contract *ContractStakeRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ContractStakeRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractStakeRegistryTransactorSession struct {
	Contract     *ContractStakeRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ContractStakeRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractStakeRegistryRaw struct {
	Contract *ContractStakeRegistry // Generic contract binding to access the raw methods on
}

// ContractStakeRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractStakeRegistryCallerRaw struct {
	Contract *ContractStakeRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// ContractStakeRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractStakeRegistryTransactorRaw struct {
	Contract *ContractStakeRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractStakeRegistry creates a new instance of ContractStakeRegistry, bound to a specific deployed contract.
func NewContractStakeRegistry(address common.Address, backend bind.ContractBackend) (*ContractStakeRegistry, error) {
	contract, err := bindContractStakeRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistry{ContractStakeRegistryCaller: ContractStakeRegistryCaller{contract: contract}, ContractStakeRegistryTransactor: ContractStakeRegistryTransactor{contract: contract}, ContractStakeRegistryFilterer: ContractStakeRegistryFilterer{contract: contract}}, nil
}

// NewContractStakeRegistryCaller creates a new read-only instance of ContractStakeRegistry, bound to a specific deployed contract.
func NewContractStakeRegistryCaller(address common.Address, caller bind.ContractCaller) (*ContractStakeRegistryCaller, error) {
	contract, err := bindContractStakeRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryCaller{contract: contract}, nil
}

// NewContractStakeRegistryTransactor creates a new write-only instance of ContractStakeRegistry, bound to a specific deployed contract.
func NewContractStakeRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractStakeRegistryTransactor, error) {
	contract, err := bindContractStakeRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryTransactor{contract: contract}, nil
}

// NewContractStakeRegistryFilterer creates a new log filterer instance of ContractStakeRegistry, bound to a specific deployed contract.
func NewContractStakeRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractStakeRegistryFilterer, error) {
	contract, err := bindContractStakeRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryFilterer{contract: contract}, nil
}

// bindContractStakeRegistry binds a generic wrapper to an already deployed contract.
func bindContractStakeRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractStakeRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractStakeRegistry *ContractStakeRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractStakeRegistry.Contract.ContractStakeRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractStakeRegistry *ContractStakeRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.ContractStakeRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractStakeRegistry *ContractStakeRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.ContractStakeRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractStakeRegistry *ContractStakeRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractStakeRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractStakeRegistry *ContractStakeRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractStakeRegistry *ContractStakeRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.contract.Transact(opts, method, params...)
}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) MAXWEIGHINGFUNCTIONLENGTH(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "MAX_WEIGHING_FUNCTION_LENGTH")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistrySession) MAXWEIGHINGFUNCTIONLENGTH() (uint8, error) {
	return _ContractStakeRegistry.Contract.MAXWEIGHINGFUNCTIONLENGTH(&_ContractStakeRegistry.CallOpts)
}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) MAXWEIGHINGFUNCTIONLENGTH() (uint8, error) {
	return _ContractStakeRegistry.Contract.MAXWEIGHINGFUNCTIONLENGTH(&_ContractStakeRegistry.CallOpts)
}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) WEIGHTINGDIVISOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "WEIGHTING_DIVISOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistrySession) WEIGHTINGDIVISOR() (*big.Int, error) {
	return _ContractStakeRegistry.Contract.WEIGHTINGDIVISOR(&_ContractStakeRegistry.CallOpts)
}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) WEIGHTINGDIVISOR() (*big.Int, error) {
	return _ContractStakeRegistry.Contract.WEIGHTINGDIVISOR(&_ContractStakeRegistry.CallOpts)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) AllocationManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "allocationManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) AllocationManager() (common.Address, error) {
	return _ContractStakeRegistry.Contract.AllocationManager(&_ContractStakeRegistry.CallOpts)
}

// AllocationManager is a free data retrieval call binding the contract method 0xca8aa7c7.
//
// Solidity: function allocationManager() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) AllocationManager() (common.Address, error) {
	return _ContractStakeRegistry.Contract.AllocationManager(&_ContractStakeRegistry.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) AvsDirectory() (common.Address, error) {
	return _ContractStakeRegistry.Contract.AvsDirectory(&_ContractStakeRegistry.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) AvsDirectory() (common.Address, error) {
	return _ContractStakeRegistry.Contract.AvsDirectory(&_ContractStakeRegistry.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) Delegation() (common.Address, error) {
	return _ContractStakeRegistry.Contract.Delegation(&_ContractStakeRegistry.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) Delegation() (common.Address, error) {
	return _ContractStakeRegistry.Contract.Delegation(&_ContractStakeRegistry.CallOpts)
}

// GetCurrentStake is a free data retrieval call binding the contract method 0x5401ed27.
//
// Solidity: function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetCurrentStake(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getCurrentStake", operatorId, quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentStake is a free data retrieval call binding the contract method 0x5401ed27.
//
// Solidity: function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetCurrentStake(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetCurrentStake(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetCurrentStake is a free data retrieval call binding the contract method 0x5401ed27.
//
// Solidity: function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetCurrentStake(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetCurrentStake(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetCurrentTotalStake is a free data retrieval call binding the contract method 0xd5eccc05.
//
// Solidity: function getCurrentTotalStake(uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetCurrentTotalStake(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getCurrentTotalStake", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentTotalStake is a free data retrieval call binding the contract method 0xd5eccc05.
//
// Solidity: function getCurrentTotalStake(uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetCurrentTotalStake(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetCurrentTotalStake(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// GetCurrentTotalStake is a free data retrieval call binding the contract method 0xd5eccc05.
//
// Solidity: function getCurrentTotalStake(uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetCurrentTotalStake(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetCurrentTotalStake(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// GetLatestStakeUpdate is a free data retrieval call binding the contract method 0xf851e198.
//
// Solidity: function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetLatestStakeUpdate(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (IStakeRegistryTypesStakeUpdate, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getLatestStakeUpdate", operatorId, quorumNumber)

	if err != nil {
		return *new(IStakeRegistryTypesStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeRegistryTypesStakeUpdate)).(*IStakeRegistryTypesStakeUpdate)

	return out0, err

}

// GetLatestStakeUpdate is a free data retrieval call binding the contract method 0xf851e198.
//
// Solidity: function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetLatestStakeUpdate(operatorId [32]byte, quorumNumber uint8) (IStakeRegistryTypesStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetLatestStakeUpdate(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetLatestStakeUpdate is a free data retrieval call binding the contract method 0xf851e198.
//
// Solidity: function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetLatestStakeUpdate(operatorId [32]byte, quorumNumber uint8) (IStakeRegistryTypesStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetLatestStakeUpdate(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeAtBlockNumber is a free data retrieval call binding the contract method 0xfa28c627.
//
// Solidity: function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeAtBlockNumber", operatorId, quorumNumber, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeAtBlockNumber is a free data retrieval call binding the contract method 0xfa28c627.
//
// Solidity: function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeAtBlockNumber(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeAtBlockNumber is a free data retrieval call binding the contract method 0xfa28c627.
//
// Solidity: function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeAtBlockNumber(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeAtBlockNumberAndIndex is a free data retrieval call binding the contract method 0xf2be94ae.
//
// Solidity: function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeAtBlockNumberAndIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeAtBlockNumberAndIndex", quorumNumber, blockNumber, operatorId, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeAtBlockNumberAndIndex is a free data retrieval call binding the contract method 0xf2be94ae.
//
// Solidity: function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeAtBlockNumberAndIndex(quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeAtBlockNumberAndIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, blockNumber, operatorId, index)
}

// GetStakeAtBlockNumberAndIndex is a free data retrieval call binding the contract method 0xf2be94ae.
//
// Solidity: function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeAtBlockNumberAndIndex(quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeAtBlockNumberAndIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, blockNumber, operatorId, index)
}

// GetStakeHistory is a free data retrieval call binding the contract method 0x2cd95940.
//
// Solidity: function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeHistory(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) ([]IStakeRegistryTypesStakeUpdate, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeHistory", operatorId, quorumNumber)

	if err != nil {
		return *new([]IStakeRegistryTypesStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new([]IStakeRegistryTypesStakeUpdate)).(*[]IStakeRegistryTypesStakeUpdate)

	return out0, err

}

// GetStakeHistory is a free data retrieval call binding the contract method 0x2cd95940.
//
// Solidity: function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeHistory(operatorId [32]byte, quorumNumber uint8) ([]IStakeRegistryTypesStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetStakeHistory(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeHistory is a free data retrieval call binding the contract method 0x2cd95940.
//
// Solidity: function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeHistory(operatorId [32]byte, quorumNumber uint8) ([]IStakeRegistryTypesStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetStakeHistory(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeHistoryLength is a free data retrieval call binding the contract method 0x4bd26e09.
//
// Solidity: function getStakeHistoryLength(bytes32 operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeHistoryLength(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeHistoryLength", operatorId, quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeHistoryLength is a free data retrieval call binding the contract method 0x4bd26e09.
//
// Solidity: function getStakeHistoryLength(bytes32 operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeHistoryLength(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeHistoryLength(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeHistoryLength is a free data retrieval call binding the contract method 0x4bd26e09.
//
// Solidity: function getStakeHistoryLength(bytes32 operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeHistoryLength(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeHistoryLength(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xac6bfb03.
//
// Solidity: function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, operatorId [32]byte, index *big.Int) (IStakeRegistryTypesStakeUpdate, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeUpdateAtIndex", quorumNumber, operatorId, index)

	if err != nil {
		return *new(IStakeRegistryTypesStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeRegistryTypesStakeUpdate)).(*IStakeRegistryTypesStakeUpdate)

	return out0, err

}

// GetStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xac6bfb03.
//
// Solidity: function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeUpdateAtIndex(quorumNumber uint8, operatorId [32]byte, index *big.Int) (IStakeRegistryTypesStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetStakeUpdateAtIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, operatorId, index)
}

// GetStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xac6bfb03.
//
// Solidity: function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeUpdateAtIndex(quorumNumber uint8, operatorId [32]byte, index *big.Int) (IStakeRegistryTypesStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetStakeUpdateAtIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, operatorId, index)
}

// GetStakeUpdateIndexAtBlockNumber is a free data retrieval call binding the contract method 0xdd9846b9.
//
// Solidity: function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeUpdateIndexAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeUpdateIndexAtBlockNumber", operatorId, quorumNumber, blockNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetStakeUpdateIndexAtBlockNumber is a free data retrieval call binding the contract method 0xdd9846b9.
//
// Solidity: function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeUpdateIndexAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	return _ContractStakeRegistry.Contract.GetStakeUpdateIndexAtBlockNumber(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeUpdateIndexAtBlockNumber is a free data retrieval call binding the contract method 0xdd9846b9.
//
// Solidity: function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeUpdateIndexAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	return _ContractStakeRegistry.Contract.GetStakeUpdateIndexAtBlockNumber(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetTotalStakeAtBlockNumberFromIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getTotalStakeAtBlockNumberFromIndex", quorumNumber, blockNumber, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetTotalStakeAtBlockNumberFromIndex(quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeAtBlockNumberFromIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, blockNumber, index)
}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetTotalStakeAtBlockNumberFromIndex(quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeAtBlockNumberFromIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, blockNumber, index)
}

// GetTotalStakeHistoryLength is a free data retrieval call binding the contract method 0x0491b41c.
//
// Solidity: function getTotalStakeHistoryLength(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetTotalStakeHistoryLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getTotalStakeHistoryLength", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakeHistoryLength is a free data retrieval call binding the contract method 0x0491b41c.
//
// Solidity: function getTotalStakeHistoryLength(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetTotalStakeHistoryLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeHistoryLength(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// GetTotalStakeHistoryLength is a free data retrieval call binding the contract method 0x0491b41c.
//
// Solidity: function getTotalStakeHistoryLength(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetTotalStakeHistoryLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeHistoryLength(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// GetTotalStakeIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x81c07502.
//
// Solidity: function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetTotalStakeIndicesAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getTotalStakeIndicesAtBlockNumber", blockNumber, quorumNumbers)

	if err != nil {
		return *new([]uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint32)).(*[]uint32)

	return out0, err

}

// GetTotalStakeIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x81c07502.
//
// Solidity: function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetTotalStakeIndicesAtBlockNumber(blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeIndicesAtBlockNumber(&_ContractStakeRegistry.CallOpts, blockNumber, quorumNumbers)
}

// GetTotalStakeIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x81c07502.
//
// Solidity: function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetTotalStakeIndicesAtBlockNumber(blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeIndicesAtBlockNumber(&_ContractStakeRegistry.CallOpts, blockNumber, quorumNumbers)
}

// GetTotalStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xb6904b78.
//
// Solidity: function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetTotalStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IStakeRegistryTypesStakeUpdate, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getTotalStakeUpdateAtIndex", quorumNumber, index)

	if err != nil {
		return *new(IStakeRegistryTypesStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeRegistryTypesStakeUpdate)).(*IStakeRegistryTypesStakeUpdate)

	return out0, err

}

// GetTotalStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xb6904b78.
//
// Solidity: function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetTotalStakeUpdateAtIndex(quorumNumber uint8, index *big.Int) (IStakeRegistryTypesStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeUpdateAtIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, index)
}

// GetTotalStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xb6904b78.
//
// Solidity: function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetTotalStakeUpdateAtIndex(quorumNumber uint8, index *big.Int) (IStakeRegistryTypesStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeUpdateAtIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, index)
}

// IsOperatorSetQuorum is a free data retrieval call binding the contract method 0x9f8aff26.
//
// Solidity: function isOperatorSetQuorum(uint8 quorumNumber) view returns(bool)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) IsOperatorSetQuorum(opts *bind.CallOpts, quorumNumber uint8) (bool, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "isOperatorSetQuorum", quorumNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOperatorSetQuorum is a free data retrieval call binding the contract method 0x9f8aff26.
//
// Solidity: function isOperatorSetQuorum(uint8 quorumNumber) view returns(bool)
func (_ContractStakeRegistry *ContractStakeRegistrySession) IsOperatorSetQuorum(quorumNumber uint8) (bool, error) {
	return _ContractStakeRegistry.Contract.IsOperatorSetQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// IsOperatorSetQuorum is a free data retrieval call binding the contract method 0x9f8aff26.
//
// Solidity: function isOperatorSetQuorum(uint8 quorumNumber) view returns(bool)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) IsOperatorSetQuorum(quorumNumber uint8) (bool, error) {
	return _ContractStakeRegistry.Contract.IsOperatorSetQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0xc46778a5.
//
// Solidity: function minimumStakeForQuorum(uint8 ) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) MinimumStakeForQuorum(opts *bind.CallOpts, arg0 uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "minimumStakeForQuorum", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0xc46778a5.
//
// Solidity: function minimumStakeForQuorum(uint8 ) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) MinimumStakeForQuorum(arg0 uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.MinimumStakeForQuorum(&_ContractStakeRegistry.CallOpts, arg0)
}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0xc46778a5.
//
// Solidity: function minimumStakeForQuorum(uint8 ) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) MinimumStakeForQuorum(arg0 uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.MinimumStakeForQuorum(&_ContractStakeRegistry.CallOpts, arg0)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) RegistryCoordinator() (common.Address, error) {
	return _ContractStakeRegistry.Contract.RegistryCoordinator(&_ContractStakeRegistry.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractStakeRegistry.Contract.RegistryCoordinator(&_ContractStakeRegistry.CallOpts)
}

// SlashableStakeLookAheadPerQuorum is a free data retrieval call binding the contract method 0x9ab4d6ff.
//
// Solidity: function slashableStakeLookAheadPerQuorum(uint8 quorumNumber) view returns(uint32)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) SlashableStakeLookAheadPerQuorum(opts *bind.CallOpts, quorumNumber uint8) (uint32, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "slashableStakeLookAheadPerQuorum", quorumNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// SlashableStakeLookAheadPerQuorum is a free data retrieval call binding the contract method 0x9ab4d6ff.
//
// Solidity: function slashableStakeLookAheadPerQuorum(uint8 quorumNumber) view returns(uint32)
func (_ContractStakeRegistry *ContractStakeRegistrySession) SlashableStakeLookAheadPerQuorum(quorumNumber uint8) (uint32, error) {
	return _ContractStakeRegistry.Contract.SlashableStakeLookAheadPerQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// SlashableStakeLookAheadPerQuorum is a free data retrieval call binding the contract method 0x9ab4d6ff.
//
// Solidity: function slashableStakeLookAheadPerQuorum(uint8 quorumNumber) view returns(uint32)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) SlashableStakeLookAheadPerQuorum(quorumNumber uint8) (uint32, error) {
	return _ContractStakeRegistry.Contract.SlashableStakeLookAheadPerQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// StakeTypePerQuorum is a free data retrieval call binding the contract method 0x697fbd93.
//
// Solidity: function stakeTypePerQuorum(uint8 quorumNumber) view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) StakeTypePerQuorum(opts *bind.CallOpts, quorumNumber uint8) (uint8, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "stakeTypePerQuorum", quorumNumber)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// StakeTypePerQuorum is a free data retrieval call binding the contract method 0x697fbd93.
//
// Solidity: function stakeTypePerQuorum(uint8 quorumNumber) view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistrySession) StakeTypePerQuorum(quorumNumber uint8) (uint8, error) {
	return _ContractStakeRegistry.Contract.StakeTypePerQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// StakeTypePerQuorum is a free data retrieval call binding the contract method 0x697fbd93.
//
// Solidity: function stakeTypePerQuorum(uint8 quorumNumber) view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) StakeTypePerQuorum(quorumNumber uint8) (uint8, error) {
	return _ContractStakeRegistry.Contract.StakeTypePerQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// StrategiesPerQuorum is a free data retrieval call binding the contract method 0x9f3ccf65.
//
// Solidity: function strategiesPerQuorum(uint8 quorumNumber, uint256 ) view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) StrategiesPerQuorum(opts *bind.CallOpts, quorumNumber uint8, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "strategiesPerQuorum", quorumNumber, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StrategiesPerQuorum is a free data retrieval call binding the contract method 0x9f3ccf65.
//
// Solidity: function strategiesPerQuorum(uint8 quorumNumber, uint256 ) view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) StrategiesPerQuorum(quorumNumber uint8, arg1 *big.Int) (common.Address, error) {
	return _ContractStakeRegistry.Contract.StrategiesPerQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber, arg1)
}

// StrategiesPerQuorum is a free data retrieval call binding the contract method 0x9f3ccf65.
//
// Solidity: function strategiesPerQuorum(uint8 quorumNumber, uint256 ) view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) StrategiesPerQuorum(quorumNumber uint8, arg1 *big.Int) (common.Address, error) {
	return _ContractStakeRegistry.Contract.StrategiesPerQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber, arg1)
}

// StrategyParams is a free data retrieval call binding the contract method 0x08732461.
//
// Solidity: function strategyParams(uint8 quorumNumber, uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) StrategyParams(opts *bind.CallOpts, quorumNumber uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "strategyParams", quorumNumber, arg1)

	outstruct := new(struct {
		Strategy   common.Address
		Multiplier *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Strategy = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Multiplier = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// StrategyParams is a free data retrieval call binding the contract method 0x08732461.
//
// Solidity: function strategyParams(uint8 quorumNumber, uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistrySession) StrategyParams(quorumNumber uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _ContractStakeRegistry.Contract.StrategyParams(&_ContractStakeRegistry.CallOpts, quorumNumber, arg1)
}

// StrategyParams is a free data retrieval call binding the contract method 0x08732461.
//
// Solidity: function strategyParams(uint8 quorumNumber, uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) StrategyParams(quorumNumber uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _ContractStakeRegistry.Contract.StrategyParams(&_ContractStakeRegistry.CallOpts, quorumNumber, arg1)
}

// StrategyParamsByIndex is a free data retrieval call binding the contract method 0xadc804da.
//
// Solidity: function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCaller) StrategyParamsByIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IStakeRegistryTypesStrategyParams, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "strategyParamsByIndex", quorumNumber, index)

	if err != nil {
		return *new(IStakeRegistryTypesStrategyParams), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeRegistryTypesStrategyParams)).(*IStakeRegistryTypesStrategyParams)

	return out0, err

}

// StrategyParamsByIndex is a free data retrieval call binding the contract method 0xadc804da.
//
// Solidity: function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractStakeRegistry *ContractStakeRegistrySession) StrategyParamsByIndex(quorumNumber uint8, index *big.Int) (IStakeRegistryTypesStrategyParams, error) {
	return _ContractStakeRegistry.Contract.StrategyParamsByIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, index)
}

// StrategyParamsByIndex is a free data retrieval call binding the contract method 0xadc804da.
//
// Solidity: function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) StrategyParamsByIndex(quorumNumber uint8, index *big.Int) (IStakeRegistryTypesStrategyParams, error) {
	return _ContractStakeRegistry.Contract.StrategyParamsByIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, index)
}

// StrategyParamsLength is a free data retrieval call binding the contract method 0x3ca5a5f5.
//
// Solidity: function strategyParamsLength(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) StrategyParamsLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "strategyParamsLength", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StrategyParamsLength is a free data retrieval call binding the contract method 0x3ca5a5f5.
//
// Solidity: function strategyParamsLength(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistrySession) StrategyParamsLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.StrategyParamsLength(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// StrategyParamsLength is a free data retrieval call binding the contract method 0x3ca5a5f5.
//
// Solidity: function strategyParamsLength(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) StrategyParamsLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.StrategyParamsLength(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) WeightOfOperatorForQuorum(opts *bind.CallOpts, quorumNumber uint8, operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "weightOfOperatorForQuorum", quorumNumber, operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) WeightOfOperatorForQuorum(quorumNumber uint8, operator common.Address) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.WeightOfOperatorForQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber, operator)
}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) WeightOfOperatorForQuorum(quorumNumber uint8, operator common.Address) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.WeightOfOperatorForQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber, operator)
}

// AddStrategies is a paid mutator transaction binding the contract method 0xc601527d.
//
// Solidity: function addStrategies(uint8 quorumNumber, (address,uint96)[] _strategyParams) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) AddStrategies(opts *bind.TransactOpts, quorumNumber uint8, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "addStrategies", quorumNumber, _strategyParams)
}

// AddStrategies is a paid mutator transaction binding the contract method 0xc601527d.
//
// Solidity: function addStrategies(uint8 quorumNumber, (address,uint96)[] _strategyParams) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) AddStrategies(quorumNumber uint8, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.AddStrategies(&_ContractStakeRegistry.TransactOpts, quorumNumber, _strategyParams)
}

// AddStrategies is a paid mutator transaction binding the contract method 0xc601527d.
//
// Solidity: function addStrategies(uint8 quorumNumber, (address,uint96)[] _strategyParams) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) AddStrategies(quorumNumber uint8, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.AddStrategies(&_ContractStakeRegistry.TransactOpts, quorumNumber, _strategyParams)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xbd29b8cd.
//
// Solidity: function deregisterOperator(bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) DeregisterOperator(opts *bind.TransactOpts, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "deregisterOperator", operatorId, quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xbd29b8cd.
//
// Solidity: function deregisterOperator(bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) DeregisterOperator(operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.DeregisterOperator(&_ContractStakeRegistry.TransactOpts, operatorId, quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xbd29b8cd.
//
// Solidity: function deregisterOperator(bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) DeregisterOperator(operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.DeregisterOperator(&_ContractStakeRegistry.TransactOpts, operatorId, quorumNumbers)
}

// InitializeDelegatedStakeQuorum is a paid mutator transaction binding the contract method 0x75d4173a.
//
// Solidity: function initializeDelegatedStakeQuorum(uint8 quorumNumber, uint96 minimumStake, (address,uint96)[] _strategyParams) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) InitializeDelegatedStakeQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "initializeDelegatedStakeQuorum", quorumNumber, minimumStake, _strategyParams)
}

// InitializeDelegatedStakeQuorum is a paid mutator transaction binding the contract method 0x75d4173a.
//
// Solidity: function initializeDelegatedStakeQuorum(uint8 quorumNumber, uint96 minimumStake, (address,uint96)[] _strategyParams) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) InitializeDelegatedStakeQuorum(quorumNumber uint8, minimumStake *big.Int, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.InitializeDelegatedStakeQuorum(&_ContractStakeRegistry.TransactOpts, quorumNumber, minimumStake, _strategyParams)
}

// InitializeDelegatedStakeQuorum is a paid mutator transaction binding the contract method 0x75d4173a.
//
// Solidity: function initializeDelegatedStakeQuorum(uint8 quorumNumber, uint96 minimumStake, (address,uint96)[] _strategyParams) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) InitializeDelegatedStakeQuorum(quorumNumber uint8, minimumStake *big.Int, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.InitializeDelegatedStakeQuorum(&_ContractStakeRegistry.TransactOpts, quorumNumber, minimumStake, _strategyParams)
}

// InitializeSlashableStakeQuorum is a paid mutator transaction binding the contract method 0xcc5a7c20.
//
// Solidity: function initializeSlashableStakeQuorum(uint8 quorumNumber, uint96 minimumStake, uint32 lookAheadPeriod, (address,uint96)[] _strategyParams) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) InitializeSlashableStakeQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int, lookAheadPeriod uint32, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "initializeSlashableStakeQuorum", quorumNumber, minimumStake, lookAheadPeriod, _strategyParams)
}

// InitializeSlashableStakeQuorum is a paid mutator transaction binding the contract method 0xcc5a7c20.
//
// Solidity: function initializeSlashableStakeQuorum(uint8 quorumNumber, uint96 minimumStake, uint32 lookAheadPeriod, (address,uint96)[] _strategyParams) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) InitializeSlashableStakeQuorum(quorumNumber uint8, minimumStake *big.Int, lookAheadPeriod uint32, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.InitializeSlashableStakeQuorum(&_ContractStakeRegistry.TransactOpts, quorumNumber, minimumStake, lookAheadPeriod, _strategyParams)
}

// InitializeSlashableStakeQuorum is a paid mutator transaction binding the contract method 0xcc5a7c20.
//
// Solidity: function initializeSlashableStakeQuorum(uint8 quorumNumber, uint96 minimumStake, uint32 lookAheadPeriod, (address,uint96)[] _strategyParams) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) InitializeSlashableStakeQuorum(quorumNumber uint8, minimumStake *big.Int, lookAheadPeriod uint32, _strategyParams []IStakeRegistryTypesStrategyParams) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.InitializeSlashableStakeQuorum(&_ContractStakeRegistry.TransactOpts, quorumNumber, minimumStake, lookAheadPeriod, _strategyParams)
}

// ModifyStrategyParams is a paid mutator transaction binding the contract method 0x20b66298.
//
// Solidity: function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) ModifyStrategyParams(opts *bind.TransactOpts, quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "modifyStrategyParams", quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyParams is a paid mutator transaction binding the contract method 0x20b66298.
//
// Solidity: function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) ModifyStrategyParams(quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.ModifyStrategyParams(&_ContractStakeRegistry.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyParams is a paid mutator transaction binding the contract method 0x20b66298.
//
// Solidity: function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) ModifyStrategyParams(quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.ModifyStrategyParams(&_ContractStakeRegistry.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x25504777.
//
// Solidity: function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint96[], uint96[])
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) RegisterOperator(opts *bind.TransactOpts, operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "registerOperator", operator, operatorId, quorumNumbers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x25504777.
//
// Solidity: function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint96[], uint96[])
func (_ContractStakeRegistry *ContractStakeRegistrySession) RegisterOperator(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.RegisterOperator(&_ContractStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x25504777.
//
// Solidity: function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint96[], uint96[])
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) RegisterOperator(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.RegisterOperator(&_ContractStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// RemoveStrategies is a paid mutator transaction binding the contract method 0x5f1f2d77.
//
// Solidity: function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) RemoveStrategies(opts *bind.TransactOpts, quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "removeStrategies", quorumNumber, indicesToRemove)
}

// RemoveStrategies is a paid mutator transaction binding the contract method 0x5f1f2d77.
//
// Solidity: function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) RemoveStrategies(quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.RemoveStrategies(&_ContractStakeRegistry.TransactOpts, quorumNumber, indicesToRemove)
}

// RemoveStrategies is a paid mutator transaction binding the contract method 0x5f1f2d77.
//
// Solidity: function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) RemoveStrategies(quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.RemoveStrategies(&_ContractStakeRegistry.TransactOpts, quorumNumber, indicesToRemove)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) SetMinimumStakeForQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "setMinimumStakeForQuorum", quorumNumber, minimumStake)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) SetMinimumStakeForQuorum(quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.SetMinimumStakeForQuorum(&_ContractStakeRegistry.TransactOpts, quorumNumber, minimumStake)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) SetMinimumStakeForQuorum(quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.SetMinimumStakeForQuorum(&_ContractStakeRegistry.TransactOpts, quorumNumber, minimumStake)
}

// SetSlashableStakeLookahead is a paid mutator transaction binding the contract method 0xe086adb3.
//
// Solidity: function setSlashableStakeLookahead(uint8 quorumNumber, uint32 _lookAheadBlocks) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) SetSlashableStakeLookahead(opts *bind.TransactOpts, quorumNumber uint8, _lookAheadBlocks uint32) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "setSlashableStakeLookahead", quorumNumber, _lookAheadBlocks)
}

// SetSlashableStakeLookahead is a paid mutator transaction binding the contract method 0xe086adb3.
//
// Solidity: function setSlashableStakeLookahead(uint8 quorumNumber, uint32 _lookAheadBlocks) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) SetSlashableStakeLookahead(quorumNumber uint8, _lookAheadBlocks uint32) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.SetSlashableStakeLookahead(&_ContractStakeRegistry.TransactOpts, quorumNumber, _lookAheadBlocks)
}

// SetSlashableStakeLookahead is a paid mutator transaction binding the contract method 0xe086adb3.
//
// Solidity: function setSlashableStakeLookahead(uint8 quorumNumber, uint32 _lookAheadBlocks) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) SetSlashableStakeLookahead(quorumNumber uint8, _lookAheadBlocks uint32) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.SetSlashableStakeLookahead(&_ContractStakeRegistry.TransactOpts, quorumNumber, _lookAheadBlocks)
}

// UpdateOperatorStake is a paid mutator transaction binding the contract method 0x66acfefe.
//
// Solidity: function updateOperatorStake(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint192)
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) UpdateOperatorStake(opts *bind.TransactOpts, operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "updateOperatorStake", operator, operatorId, quorumNumbers)
}

// UpdateOperatorStake is a paid mutator transaction binding the contract method 0x66acfefe.
//
// Solidity: function updateOperatorStake(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint192)
func (_ContractStakeRegistry *ContractStakeRegistrySession) UpdateOperatorStake(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.UpdateOperatorStake(&_ContractStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// UpdateOperatorStake is a paid mutator transaction binding the contract method 0x66acfefe.
//
// Solidity: function updateOperatorStake(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint192)
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) UpdateOperatorStake(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.UpdateOperatorStake(&_ContractStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// ContractStakeRegistryLookAheadPeriodChangedIterator is returned from FilterLookAheadPeriodChanged and is used to iterate over the raw logs and unpacked data for LookAheadPeriodChanged events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryLookAheadPeriodChangedIterator struct {
	Event *ContractStakeRegistryLookAheadPeriodChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryLookAheadPeriodChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryLookAheadPeriodChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryLookAheadPeriodChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryLookAheadPeriodChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryLookAheadPeriodChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryLookAheadPeriodChanged represents a LookAheadPeriodChanged event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryLookAheadPeriodChanged struct {
	OldLookAheadBlocks uint32
	NewLookAheadBlocks uint32
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterLookAheadPeriodChanged is a free log retrieval operation binding the contract event 0x28d7358b79f02d21b8b7e17aefc4185a64308aa37406fa5befc05b91932c39c7.
//
// Solidity: event LookAheadPeriodChanged(uint32 oldLookAheadBlocks, uint32 newLookAheadBlocks)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterLookAheadPeriodChanged(opts *bind.FilterOpts) (*ContractStakeRegistryLookAheadPeriodChangedIterator, error) {

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "LookAheadPeriodChanged")
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryLookAheadPeriodChangedIterator{contract: _ContractStakeRegistry.contract, event: "LookAheadPeriodChanged", logs: logs, sub: sub}, nil
}

// WatchLookAheadPeriodChanged is a free log subscription operation binding the contract event 0x28d7358b79f02d21b8b7e17aefc4185a64308aa37406fa5befc05b91932c39c7.
//
// Solidity: event LookAheadPeriodChanged(uint32 oldLookAheadBlocks, uint32 newLookAheadBlocks)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchLookAheadPeriodChanged(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryLookAheadPeriodChanged) (event.Subscription, error) {

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "LookAheadPeriodChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryLookAheadPeriodChanged)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "LookAheadPeriodChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLookAheadPeriodChanged is a log parse operation binding the contract event 0x28d7358b79f02d21b8b7e17aefc4185a64308aa37406fa5befc05b91932c39c7.
//
// Solidity: event LookAheadPeriodChanged(uint32 oldLookAheadBlocks, uint32 newLookAheadBlocks)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseLookAheadPeriodChanged(log types.Log) (*ContractStakeRegistryLookAheadPeriodChanged, error) {
	event := new(ContractStakeRegistryLookAheadPeriodChanged)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "LookAheadPeriodChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator is returned from FilterMinimumStakeForQuorumUpdated and is used to iterate over the raw logs and unpacked data for MinimumStakeForQuorumUpdated events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator struct {
	Event *ContractStakeRegistryMinimumStakeForQuorumUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryMinimumStakeForQuorumUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryMinimumStakeForQuorumUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryMinimumStakeForQuorumUpdated represents a MinimumStakeForQuorumUpdated event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryMinimumStakeForQuorumUpdated struct {
	QuorumNumber uint8
	MinimumStake *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMinimumStakeForQuorumUpdated is a free log retrieval operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterMinimumStakeForQuorumUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "MinimumStakeForQuorumUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator{contract: _ContractStakeRegistry.contract, event: "MinimumStakeForQuorumUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumStakeForQuorumUpdated is a free log subscription operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchMinimumStakeForQuorumUpdated(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryMinimumStakeForQuorumUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "MinimumStakeForQuorumUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryMinimumStakeForQuorumUpdated)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "MinimumStakeForQuorumUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumStakeForQuorumUpdated is a log parse operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseMinimumStakeForQuorumUpdated(log types.Log) (*ContractStakeRegistryMinimumStakeForQuorumUpdated, error) {
	event := new(ContractStakeRegistryMinimumStakeForQuorumUpdated)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "MinimumStakeForQuorumUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryOperatorStakeUpdateIterator is returned from FilterOperatorStakeUpdate and is used to iterate over the raw logs and unpacked data for OperatorStakeUpdate events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryOperatorStakeUpdateIterator struct {
	Event *ContractStakeRegistryOperatorStakeUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryOperatorStakeUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryOperatorStakeUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryOperatorStakeUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryOperatorStakeUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryOperatorStakeUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryOperatorStakeUpdate represents a OperatorStakeUpdate event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryOperatorStakeUpdate struct {
	OperatorId   [32]byte
	QuorumNumber uint8
	Stake        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterOperatorStakeUpdate is a free log retrieval operation binding the contract event 0x2f527d527e95d8fe40aec55377743bb779087da3f6d0d08f12e36444da62327d.
//
// Solidity: event OperatorStakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterOperatorStakeUpdate(opts *bind.FilterOpts, operatorId [][32]byte) (*ContractStakeRegistryOperatorStakeUpdateIterator, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "OperatorStakeUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryOperatorStakeUpdateIterator{contract: _ContractStakeRegistry.contract, event: "OperatorStakeUpdate", logs: logs, sub: sub}, nil
}

// WatchOperatorStakeUpdate is a free log subscription operation binding the contract event 0x2f527d527e95d8fe40aec55377743bb779087da3f6d0d08f12e36444da62327d.
//
// Solidity: event OperatorStakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchOperatorStakeUpdate(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryOperatorStakeUpdate, operatorId [][32]byte) (event.Subscription, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "OperatorStakeUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryOperatorStakeUpdate)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "OperatorStakeUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorStakeUpdate is a log parse operation binding the contract event 0x2f527d527e95d8fe40aec55377743bb779087da3f6d0d08f12e36444da62327d.
//
// Solidity: event OperatorStakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseOperatorStakeUpdate(log types.Log) (*ContractStakeRegistryOperatorStakeUpdate, error) {
	event := new(ContractStakeRegistryOperatorStakeUpdate)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "OperatorStakeUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryQuorumCreatedIterator is returned from FilterQuorumCreated and is used to iterate over the raw logs and unpacked data for QuorumCreated events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryQuorumCreatedIterator struct {
	Event *ContractStakeRegistryQuorumCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryQuorumCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryQuorumCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryQuorumCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryQuorumCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryQuorumCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryQuorumCreated represents a QuorumCreated event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryQuorumCreated struct {
	QuorumNumber uint8
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterQuorumCreated is a free log retrieval operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterQuorumCreated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryQuorumCreatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "QuorumCreated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryQuorumCreatedIterator{contract: _ContractStakeRegistry.contract, event: "QuorumCreated", logs: logs, sub: sub}, nil
}

// WatchQuorumCreated is a free log subscription operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchQuorumCreated(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryQuorumCreated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "QuorumCreated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryQuorumCreated)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "QuorumCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuorumCreated is a log parse operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseQuorumCreated(log types.Log) (*ContractStakeRegistryQuorumCreated, error) {
	event := new(ContractStakeRegistryQuorumCreated)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "QuorumCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryStakeTypeSetIterator is returned from FilterStakeTypeSet and is used to iterate over the raw logs and unpacked data for StakeTypeSet events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStakeTypeSetIterator struct {
	Event *ContractStakeRegistryStakeTypeSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryStakeTypeSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryStakeTypeSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryStakeTypeSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryStakeTypeSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryStakeTypeSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryStakeTypeSet represents a StakeTypeSet event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStakeTypeSet struct {
	NewStakeType uint8
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStakeTypeSet is a free log retrieval operation binding the contract event 0x7c112e863ccf007862e2c9e25819c933fedbc9350a6443423b4a8599c2e8a52d.
//
// Solidity: event StakeTypeSet(uint8 newStakeType)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterStakeTypeSet(opts *bind.FilterOpts) (*ContractStakeRegistryStakeTypeSetIterator, error) {

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "StakeTypeSet")
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryStakeTypeSetIterator{contract: _ContractStakeRegistry.contract, event: "StakeTypeSet", logs: logs, sub: sub}, nil
}

// WatchStakeTypeSet is a free log subscription operation binding the contract event 0x7c112e863ccf007862e2c9e25819c933fedbc9350a6443423b4a8599c2e8a52d.
//
// Solidity: event StakeTypeSet(uint8 newStakeType)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchStakeTypeSet(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStakeTypeSet) (event.Subscription, error) {

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "StakeTypeSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryStakeTypeSet)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "StakeTypeSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeTypeSet is a log parse operation binding the contract event 0x7c112e863ccf007862e2c9e25819c933fedbc9350a6443423b4a8599c2e8a52d.
//
// Solidity: event StakeTypeSet(uint8 newStakeType)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseStakeTypeSet(log types.Log) (*ContractStakeRegistryStakeTypeSet, error) {
	event := new(ContractStakeRegistryStakeTypeSet)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "StakeTypeSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryStrategyAddedToQuorumIterator is returned from FilterStrategyAddedToQuorum and is used to iterate over the raw logs and unpacked data for StrategyAddedToQuorum events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyAddedToQuorumIterator struct {
	Event *ContractStakeRegistryStrategyAddedToQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryStrategyAddedToQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryStrategyAddedToQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryStrategyAddedToQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryStrategyAddedToQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryStrategyAddedToQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryStrategyAddedToQuorum represents a StrategyAddedToQuorum event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyAddedToQuorum struct {
	QuorumNumber uint8
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyAddedToQuorum is a free log retrieval operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterStrategyAddedToQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryStrategyAddedToQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryStrategyAddedToQuorumIterator{contract: _ContractStakeRegistry.contract, event: "StrategyAddedToQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyAddedToQuorum is a free log subscription operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchStrategyAddedToQuorum(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStrategyAddedToQuorum, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryStrategyAddedToQuorum)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyAddedToQuorum is a log parse operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseStrategyAddedToQuorum(log types.Log) (*ContractStakeRegistryStrategyAddedToQuorum, error) {
	event := new(ContractStakeRegistryStrategyAddedToQuorum)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryStrategyMultiplierUpdatedIterator is returned from FilterStrategyMultiplierUpdated and is used to iterate over the raw logs and unpacked data for StrategyMultiplierUpdated events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyMultiplierUpdatedIterator struct {
	Event *ContractStakeRegistryStrategyMultiplierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryStrategyMultiplierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryStrategyMultiplierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryStrategyMultiplierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryStrategyMultiplierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryStrategyMultiplierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryStrategyMultiplierUpdated represents a StrategyMultiplierUpdated event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyMultiplierUpdated struct {
	QuorumNumber uint8
	Strategy     common.Address
	Multiplier   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyMultiplierUpdated is a free log retrieval operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterStrategyMultiplierUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryStrategyMultiplierUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "StrategyMultiplierUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryStrategyMultiplierUpdatedIterator{contract: _ContractStakeRegistry.contract, event: "StrategyMultiplierUpdated", logs: logs, sub: sub}, nil
}

// WatchStrategyMultiplierUpdated is a free log subscription operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchStrategyMultiplierUpdated(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStrategyMultiplierUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "StrategyMultiplierUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryStrategyMultiplierUpdated)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyMultiplierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyMultiplierUpdated is a log parse operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseStrategyMultiplierUpdated(log types.Log) (*ContractStakeRegistryStrategyMultiplierUpdated, error) {
	event := new(ContractStakeRegistryStrategyMultiplierUpdated)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyMultiplierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryStrategyRemovedFromQuorumIterator is returned from FilterStrategyRemovedFromQuorum and is used to iterate over the raw logs and unpacked data for StrategyRemovedFromQuorum events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyRemovedFromQuorumIterator struct {
	Event *ContractStakeRegistryStrategyRemovedFromQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryStrategyRemovedFromQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryStrategyRemovedFromQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryStrategyRemovedFromQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryStrategyRemovedFromQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryStrategyRemovedFromQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryStrategyRemovedFromQuorum represents a StrategyRemovedFromQuorum event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyRemovedFromQuorum struct {
	QuorumNumber uint8
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyRemovedFromQuorum is a free log retrieval operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterStrategyRemovedFromQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryStrategyRemovedFromQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryStrategyRemovedFromQuorumIterator{contract: _ContractStakeRegistry.contract, event: "StrategyRemovedFromQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyRemovedFromQuorum is a free log subscription operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchStrategyRemovedFromQuorum(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStrategyRemovedFromQuorum, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryStrategyRemovedFromQuorum)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyRemovedFromQuorum is a log parse operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseStrategyRemovedFromQuorum(log types.Log) (*ContractStakeRegistryStrategyRemovedFromQuorum, error) {
	event := new(ContractStakeRegistryStrategyRemovedFromQuorum)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
